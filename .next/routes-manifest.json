{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/api/product/[slug]",
      "regex": "^/api/product/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/api/product/(?<nxtPslug>[^/]+?)(?:/)?$"
    },
    {
      "page": "/api/variant-options/[variant_id]",
      "regex": "^/api/variant\\-options/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPvariant_id": "nxtPvariant_id"
      },
      "namedRegex": "^/api/variant\\-options/(?<nxtPvariant_id>[^/]+?)(?:/)?$"
    },
    {
      "page": "/category/[slug]",
      "regex": "^/category/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/category/(?<nxtPslug>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[slug]",
      "regex": "^/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/(?<nxtPslug>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/admin",
      "regex": "^/admin(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin(?:/)?$"
    },
    {
      "page": "/admin/brands",
      "regex": "^/admin/brands(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/brands(?:/)?$"
    },
    {
      "page": "/admin/category",
      "regex": "^/admin/category(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/category(?:/)?$"
    },
    {
      "page": "/admin/orders",
      "regex": "^/admin/orders(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/orders(?:/)?$"
    },
    {
      "page": "/admin/products",
      "regex": "^/admin/products(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/products(?:/)?$"
    },
    {
      "page": "/admin/products/new",
      "regex": "^/admin/products/new(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/products/new(?:/)?$"
    },
    {
      "page": "/admin/products/variant",
      "regex": "^/admin/products/variant(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin/products/variant(?:/)?$"
    },
    {
      "page": "/admin-login",
      "regex": "^/admin\\-login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/admin\\-login(?:/)?$"
    },
    {
      "page": "/category",
      "regex": "^/category(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/category(?:/)?$"
    },
    {
      "page": "/checkout",
      "regex": "^/checkout(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/checkout(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/login",
      "regex": "^/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/login(?:/)?$"
    },
    {
      "page": "/myaccount",
      "regex": "^/myaccount(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/myaccount(?:/)?$"
    },
    {
      "page": "/singup",
      "regex": "^/singup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/singup(?:/)?$"
    },
    {
      "page": "/success",
      "regex": "^/success(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/success(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}